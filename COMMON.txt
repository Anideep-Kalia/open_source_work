Familiarize yourself => MOST IMPORTANT

------------------APPROACH------------------
Create a Branch: git checkout -b feature-branch-name
Make Changes
Test Locally
Commit Changes: git add . => git commit -m "Fix: Issue description or feature name"
Push Changes: git push origin feature-branch-name
Open a Pull Request

-------------------ZULIP--------------------
Claiming a issue: simply post a comment that says @zulipbot claim  => only for zulip/zulip and zulip/zulip-terminal
issues resolved by  running ./tools/provision (from /srv/zulip) inside the Vagrant guest or equivalently vagrant provision from outside
When ready, click the Create pull request button to submit the pull request. Remember to mark your pull request as a draft if it is a work-in-progress.

RUNNING ENVIROMENT
./tools/provision
source /srv/zulip-py3-venv/bin/activate
./tools/run-dev

DIFFERENT BRANCH RR
git checkout feature-branch
git rebase upstream/main
git push origin feature-branch

SYNCHORINING FORK
-> fetch upstream
-> git checkout main
-> git rebase upstream/main    {this means rebase from main branch of upstream}

AFTER COMMIT 
tools/setup-git-repo  => linting after code change in a file 
tools/lint => for all files
./tools/run-dev => live terminal which will show runtime/backend errors

ERRORS: https://zulip.readthedocs.io/en/latest/development/setup-recommended.html  [LAST SECTION]
GIT CODES: https://zulip.readthedocs.io/en/latest/git/index.html

LINTING:
./tools/test-all
./tools/lint zerver/models/__init__.py 							# Lint the file you just changed
./tools/test-backend zerver.tests.test_markdown.MarkdownTest.test_inline_youtube
./tools/test-backend MarkdownTest 							# Run `test-backend --help` for more options
./tools/test-js-with-node util
./tools/test-run-dev
./tools/test-tools
./tools/check-frontend-i18n
./tools/setup-git-repo			 #linting is also automatically done whenever we will commit some changes

